"""
Django settings for NewsPortal project.

Generated by 'django-admin startproject' using Django 4.0.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""
import os.path
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-p860h$3n$c%dz!z!al5rr9-3!%elg7vs(zgh4!6-v)!2$%6w+y'

# SECRET_KEY = '{{secret_key}}'  # здесь ещё надо поменять секретный ключ(когда мы делаем шаблоном наше приложение),
                                # чтобы в целях безопасности он генерировался всегда по новой

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
# DEBUG = False

ALLOWED_HOSTS = ['127.0.0.1']

# Application definition

INSTALLED_APPS = [
    'modeltranslation',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'news',
    'django.contrib.sites',
    'django.contrib.flatpages',
    'django_filters',
    'sign',
    'protect',
    'appointments.apps.AppointmentConfig',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'django_apscheduler',
    'mcdonalds.apps.McdonaldsConfig',
    # 'news.apps.NewsConfig',
]

SITE_ID = 1

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',

    'django.middleware.locale.LocaleMiddleware', #(важна последовательность, только так!)
    # 'news.middlewares.TimezoneMiddleware',   #(для выбора времени, важна последовательность! внизу не работает)
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',

    # кэширывание весего сайт целиком (т. е. каждую страницу вообще, для сайта из статических страниц). слабо подходит для нашего проекта
    # 'django.contrib.flatpages.middleware.FlatpageFallbackMiddleware',
    # 'django.middleware.cache.UpdateCacheMiddleware',
    # 'django.middleware.cache.FetchFromCacheMiddleware',


]

ROOT_URLCONF = 'NewsPortal.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'NewsPortal.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}
# база данных postgres SQL отключена
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'NAME': BASE_DIR / 'postgres',
#         'USER': 'postgres',
#         'PASSWORD': 'M0yp4r0L',
#         'HOST': 'localhost',
#         'PORT': '5432',
#     },
# }

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'ru'

LANGUAGES = [
    ('ru', 'Русский'),
    ('en', 'English'),
]
# Если вам нужны ещё какие-либо языки, можете вписать их сюда. Если же у вас несколько языков,
# то вы можете записать их в такой же отдельный список
# MODELTRANSLATION_LANGUAGES = []

# TIME_ZONE = 'UTC'
TIME_ZONE = 'Europe/Moscow'

USE_L10N = True

USE_I18N = True

USE_TZ = True

LOCALE_PATHS = [
    os.path.join(BASE_DIR, 'locale')
]

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

STATICFILES_DIRS = [BASE_DIR / "news/static"]

# STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# MEDIA_URL = '/media/'
#
# MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# LOGIN_URL = '/sign/login/'

LOGIN_URL = '/accounts/login/'
# При корректных данных для входа, пользователь перенаправляется на страницу, указанною по данному пути
# страница, куда перенаправляется пользователь после успешного входа на сайт
LOGIN_REDIRECT_URL = '/news/'
#чтоб можно было авторизоваться через сторонние сервисы, нужно «включить»
# аутентификацию как по username, так и специфичную по email или сервис-провайдеру
AUTHENTICATION_BACKENDS = [

    # Needed to login by username in Django admin, regardless of `allauth`
    # добавить бэкенды аутентификации: встроенный бэкенд Django, реализующий аутентификацию по username
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    # бэкенд аутентификации, предоставленный пакетом allauth
    'allauth.account.auth_backends.AuthenticationBackend',
]

ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 3

ACCOUNT_FORMS = {'signup': 'sign.models.BasicSignupForm'}
#консольный провайдер (адаптер) в настройках, чтобы письма отправлялись не на реальный сервер, а вам в среду
# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

DEFAULT_FROM_EMAIL = 'st3p.pavel@yandex.ru'
EMAIL_HOST = 'smtp.yandex.ru'  # адрес сервера Яндекс-почты для всех один и тот же
EMAIL_PORT = 465  # порт smtp сервера тоже одинаковый
EMAIL_HOST_USER = 'st3p.pavel'  # ваше имя пользователя, например, если ваша почта user@yandex.ru,
# то сюда надо писать user, иными словами, это всё то что идёт до собаки
EMAIL_HOST_PASSWORD = '3Dr4V67VY1IT'  # пароль от почты
EMAIL_USE_SSL = True  # Яндекс использует ssl, подробнее о том, что это, почитайте в дополнительных источниках,
# но включать его здесь обязательно

# список всех админов, манагеров в формате ('имя', 'их почта' (в моём случае не срабатывает шаблон регистрации с именем(пока))
ADMINS = [
    ('Mail', 'stepa.hax@bk.ru'),

    ('Yandex', 'st3p.pavel@yandex.ru'),

]

MANAGERS = [
    ('Mail', 'stepanov.hax@bk.ru'),
    ('Yandex', 'st3p.pavel@yandex.ru')
]

SERVER_EMAIL = 'st3p.pavel@yandex.ru'  # это будет у нас вместо аргумента FROM в массовой рассылке
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
APSCHEDULER_DATETIME_FORMAT = "N j, Y, f:s a"
APSCHEDULER_RUN_NOW_TIMEOUT = 25

# Celery,Redis
# указывает на URL брокера сообщений (Redis). По умолчанию он находится на порту 6379
# чтоб настроить правильную работу для винды среды
# заменяем это (см ниже)
# CELERY_BROKER_URL = 'redis://localhost:6379'
# по такому правилу
# redis://:password@hostname:port/db_number
# db_number = 0, обязательно, иначе ошибки будут
# на это
CELERY_BROKER_URL = 'redis://:SQgQovYVrRQ85HmXfcqtVYH6wmdhSUar@redis-14226.c51.ap-southeast-2-1.ec2.cloud.redislabs.com:14226/0'

# куда будут отправляться все данные, указывает на хранилище результатов выполнения задач
# заменяем это
# CELERY_RESULT_BACKEND = 'redis://localhost:6379'
# на это
CELERY_RESULT_BACKEND = 'redis://:SQgQovYVrRQ85HmXfcqtVYH6wmdhSUar@redis-14226.c51.ap-southeast-2-1.ec2.cloud.redislabs.com:14226/0'
# формат наших данных
CELERY_ACCEPT_CONTENT = ['application/json']
# формат данных, метод сериализации задач
CELERY_TASK_SERIALIZER = 'json'
# формат данных, метод сериализации результатов
CELERY_RESULT_SERIALIZER = 'json'

# чтобы добавить кэширование через файловую систему в наш проект

# CACHES = {
#     'default': {
#         'TIMEOUT': 30,  # добавляем стандартное время ожидания в минуту (по умолчанию, без таймаута, это 5 минут — 300 секунд)
#         'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
#         'LOCATION': os.path.join(BASE_DIR, 'cache_files'),  # BASE_DIR - значит папка проекта Указываем, куда
#         # будем сохранять кэшируемые файлы! Не забываем создать папку cache_files внутри папки с manage.py!
#     }
# }


# Логирование
# 1 - (без изменений) просто единица
# 2 - без изменений (контролирует работу существующей схемы логирования Django)
# 3 - варианты (форматы) вывода информации (сообщений)
# 4 - для уровня дебага делаем вывод инфы
# (asctime) - время возникновения сообщения.
                # По умолчанию это имеет форму ‘2003-07-08 16:49:45,896’ (числа после запятой-миллисекундная часть времени)
# (levelname) - уровень логирования.
                # Уровень ведения журнала текста для сообщения ('DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL').
# (module) - модуль-источник сообщения (имя части filename).
# (message) - само сообщени
# (process) - процесс. Идентификатор процесса (если имеется).
# (thread) - поток, в которых оно возникло сообщений. Идентификатор потока (если имеется).
# (pathname) - путь к источнику события. Полный путь к исходному файлу, в котором был выполнен вызов ведения журнала
#               (если он доступен).
# (exc_info) - стэк ошибки
# 5 - фильтр, который пропускает сообщения в зависимости от состояния переменной DEBUG, например, если она
# (DEBUG = True), то выводить сообщения и т.д.
# 6 - хендлер, то есть обработчик, когда мы получили сообщение, обработчик может вывести его в
# соответствии с форматом, фильтрами, уровнями либо в консоль, либо записать в файл, либо отправить по почте

# синтаксис модуля logging, так называемый %-style format string
# % обозначает что далее следует переменная
# далее - в скобках имя переменной
# и буква - обозначает тип переменной s - строка, d - целое число
LOGGING = {
    'version': 1,  # 1
    'disable_existing_loggers': False,  # 2
    'formatters': {  # 3

        # 1-3 пункт задания
        # для уровня DEBUG - время, уровень логирования, сообщение
        'debug_console': {  # 4
            'format': '%(asctime)s %(levelname)s %(pathname)s %(message)s',
        },
        # для уровня WARNING - время, уровень логирования, путь к событию, сообщение
        'warning_console': {
            'format': '%(asctime)s %(levelname)s %(pathname)s %(message)s'
        },

        # 3 пункт задания
        # для уровней ERROR и CRITICAL - время, уровень логирования, путь к событию, сообщение, стэк ошибки
        # для файла errors.log
        'error_critical': {
            'format': '%(asctime)s %(levelname)s %(message)s %(pathname)s %(exc_info)s'
        },

        # 2-4 пункт задания - время, уровень логирования, модуль, сообщение
        # для файлов general.log и security.log
        'general_security_log': {
            'format': '%(asctime)s %(levelname)s %(module)s %(message)s'
        },

        # 5 пункт задания - время, уровень логирования, путь к событию, сообщение
        # для уровня ERROR, для отправки по почте
        'mail_log': {
            'format': '%(asctime)s %(levelname)s %(pathname)s %(message)s'
        }
    },

    'filters': {  # 5
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
    },

    'handlers': {  # 6

        # 1 пункт задания - уровень DEBUG, фильтр DEBUG = True везде, кроме отправки по почте и
        # записи в файл general.log
        'console_debug': {
            'level': 'DEBUG',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'debug_console'
        },
        'console_warning': {
            'level': 'WARNING',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'warning_console'
        },

        # 2 пункт задания, уровень INFO, фильтр DEBUG = False
        'file_general': {
            'level': 'INFO',
            'filters': ['require_debug_false'],
            'class': 'logging.FileHandler',
            'filename': 'general.log',
            'formatter': 'general_security_log'
        },

        # 4 пункт задания, уровень INFO
        'file_security': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': 'security.log',
            'formatter': 'general_security_log'
        },

        # 3 пункт задания - уровень ERROR, вывод в файл errors.log
        'file_errors': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'filename': 'errors.log',
            'formatter': 'error_critical'
        },

        # 3 пункт задания - уровень CRITICAL, вывод в файл errors.log
        'file_critical': {
            'level': 'CRITICAL',
            'class': 'logging.FileHandler',
            'filename': 'errors.log',
            'formatter': 'error_critical'
        },

        # 5 пункт задания - уровень ERROR, отправка по почте
        'mail_admin': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler',
            'formatter': 'mail_log'
        }
    },

    'loggers': {  # 6 формируем логеров

        # 1, 2 пункт задания
        'django': {
            'handlers': ['console_debug', 'console_warning', 'file_general'],
            'propagate': True,
        },

        # 3 пункт задания
        'django.template': {
            'handlers': ['file_errors', 'file_critical'],
            'propagate': True,
        },

        # 3 пункт задания
        'django.db_backends': {
            'handlers': ['file_errors', 'file_critical'],
            'propagate': True,
        },

        # 4 пункт задания
        'django.security': {
            'handlers': ['file_security'],
            'propagate': True,
        },

        # 5 и 3 пункт задания
        'django.request': {
            'handlers': ['file_errors', 'file_critical', 'mail_admin'],
            'propagate': True,
        },

        # 5 и 3 пункт задания
        'django.server': {
            'handlers': ['file_errors', 'file_critical', 'mail_admin'],
            'propagate': True,
        }
    }
}